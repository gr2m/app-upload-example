var promisify = require('../when-promisify.js')
describe("promisify(callback)", function( done ) {
  it("should promisify a node-style callback function with context", function() {
    var func = function( cb ) { cb() }
    var promisifiedFunc = promisify( func )
    var spy = jasmine.createSpy('done')
    promisifiedFunc().then( spy )
    expect(spy).wasCalled();
  });
  it("should promisify a node-style callback function with context (testing error)", function() {
    var func = function( cb ) { cb({error: 'oops'}) }
    var promisifiedFunc = promisify( func )
    var spy = jasmine.createSpy('done')
    promisifiedFunc().then( null, spy )
    expect(spy).wasCalled();
  });
  it("should reject with an Error instance", function() {
    var func = function( cb ) { cb( 'oops' ) }
    var promisifiedFunc = promisify( func )
    var spy = jasmine.createSpy('done')
    promisifiedFunc().then( null, spy )

    var error = spy.mostRecentCall.args[0]
    expect(error instanceof Error).toBeTruthy();
    expect(error.name).toBe('Error');
    expect(error.message).toBe('oops');
  });
  it("should turn {error: 'DamnError', reason: 'because'} into a meaningful Error instance", function() {
    var func = function( cb ) { cb({error: 'DamnError', reason: 'because'}) }
    var promisifiedFunc = promisify( func )
    var spy = jasmine.createSpy('done')
    promisifiedFunc().then( null, spy )

    var error = spy.mostRecentCall.args[0]
    expect(error.name).toBe('DamnError');
    expect(error.message).toBe('because');
  });
});

describe("promisify(context, methodName)", function(  ) {
  it("should promisify a node-style callback function with context", function() {
    var context = {
      proxy : function( cb ) { cb() },
      func  : function( cb ) { this.proxy(cb) }
    }
    var promisifiedFunc = promisify(context, 'func')
    var spy = jasmine.createSpy('done')
    promisifiedFunc().then( spy )
  });
  it("should promisify a node-style callback function with context (testing error)", function() {
    var context = {
      proxy : function( cb ) { cb({error: 'oops'}) },
      func  : function( cb ) { this.proxy(cb) }
    }
    var promisifiedFunc = promisify(context, 'func')
    var spy = jasmine.createSpy('done')
    promisifiedFunc().then( null, spy )
    expect(spy).wasCalled();
  });
});