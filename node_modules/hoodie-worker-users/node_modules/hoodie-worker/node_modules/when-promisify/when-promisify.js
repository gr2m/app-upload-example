var when = require("when");

// 
// when-promisify supports two ways to promisify a callback function.
// 
// 1. simple way: just pass a function
// 
//        var promisify = require('when-promisify')
//        var promise = promisify( cbFunction )
// 
// 2. pass a function with its context
// 
//        var promisify = require('when-promisify')
//        var promise = promisify( Object, 'methodName' )
// 
var promisify = function(context, methodName) {
  return function() {
    var defer = when.defer();
    var promiseArgs  = Array.prototype.slice.call(arguments);
    var func = methodName ? context[methodName] : context;

    var callback = function( errorResponse ) {
      var name;
      var error = new Error()
      var callbackArgs  = Array.prototype.slice.call(arguments);
      if (errorResponse) {
        name = context.name;
        if (methodName) {
          name += "." + methodName
        }
        if (errorResponse.error) {
          error.name = errorResponse.error;
          error.message = errorResponse.message || errorResponse.reason;
        } else {
          error.message = errorResponse.toString()
        }
        defer.reject(error);
      }
      callbackArgs.shift();
      defer.resolve.apply(null, callbackArgs);
    };

    promiseArgs.push(callback);
    func.apply(context, promiseArgs);

    return defer.promise;
  };
};

module.exports = promisify;