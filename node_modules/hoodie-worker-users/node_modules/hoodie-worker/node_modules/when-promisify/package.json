{
  "name": "when-promisify",
  "version": "0.0.2",
  "description": "a simple method to make node-style callback function return a promise instead. Based on when.js ",
  "main": "when-promisify.js",
  "dependencies": {
    "when": "~1.7"
  },
  "devDependencies": {
    "jasmine-node": "*"
  },
  "scripts": {
    "test": "jasmine-node spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gr2m/when-promisify.git"
  },
  "keywords": [
    "promise",
    "when",
    "promisify"
  ],
  "author": {
    "name": "Gregor Martynus"
  },
  "license": "MIT",
  "readme": "when-promisify\n================\n\nMake any node-style callback function return a promise instead.  \nwhen-promisify supports two ways to promisify a callback function.\n\n1. simple way: just pass a function\n\n       var promisify = require('when-promisify')\n       var promise = promisify( cbFunction )\n\n2. pass a function with its context\n\n       var promisify = require('when-promisify')\n       var promise = promisify( Object, 'methodName' )\n",
  "readmeFilename": "README.md",
  "_id": "when-promisify@0.0.2",
  "dist": {
    "shasum": "9acf100b940b4c724576a6bca0872533e9ce3280"
  },
  "_resolved": "git://github.com/gr2m/when-promisify.git#9fe0694e2acc39b3aadd6c0bd96c3df40013c576",
  "_from": "when-promisify@git://github.com/gr2m/when-promisify.git"
}
